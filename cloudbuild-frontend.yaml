steps:
  # Build the Docker image for the frontend
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/healthcare-testgen-frontend:${COMMIT_SHA}'
      - '-f'
      - 'frontend/Dockerfile'
      - '--build-arg'
      - 'VITE_API_BASE_URL=${_BACKEND_SERVICE_URL}/api'
      - '--build-arg'
      - 'VITE_WEBSOCKET_URL=${_BACKEND_SERVICE_URL}'
      - '--build-arg'
      - 'VITE_GOOGLE_CLOUD_PROJECT_ID=${PROJECT_ID}' # Using built-in PROJECT_ID
      - '--build-arg'
      - 'VITE_FIREBASE_API_KEY=${_FIREBASE_API_KEY}'
      - '--build-arg'
      - 'VITE_FIREBASE_AUTH_DOMAIN=${_FIREBASE_AUTH_DOMAIN}'
      - '--build-arg'
      - 'VITE_FIREBASE_PROJECT_ID=${_FIREBASE_PROJECT_ID}'
      - '--build-arg'
      - 'VITE_FIREBASE_STORAGE_BUCKET=${_FIREBASE_STORAGE_BUCKET}'
      - '--build-arg'
      - 'VITE_FIREBASE_MESSAGING_SENDER_ID=${_FIREBASE_MESSAGING_SENDER_ID}'
      - '--build-arg'
      - 'VITE_FIREBASE_APP_ID=${_FIREBASE_APP_ID}'
      - '.'
    dir: 'frontend'

  # Push the Docker image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/healthcare-testgen-frontend:${COMMIT_SHA}'

  # Deploy the frontend service to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'healthcare-testgen-frontend'
      - '--image'
      - 'gcr.io/${PROJECT_ID}/healthcare-testgen-frontend:${COMMIT_SHA}'
      - '--region'
      - '${_CLOUD_RUN_REGION}' # Use custom substitution for region
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated' # Adjust based on your authentication needs
      - '--port'
      - '80' # Nginx serves on port 80
options:
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET
images:
  - 'gcr.io/${PROJECT_ID}/healthcare-testgen-frontend:${COMMIT_SHA}'
